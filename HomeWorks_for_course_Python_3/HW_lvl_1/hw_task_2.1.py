# Домашняя работа по задаче 2.1 курса Python 3

# Задача 2.1. (Условие)

# Создайте две функции maximum и minimum,
# которые получают список целых чисел в качестве входных данных 
# и возвращают наибольшее и наименьшее число в этом списке соответственно.
# Например,
# * [4,6,2,1,9,63,-134,566]         -> max = 566, min = -134
# * [-52, 56, 30, 29, -54, 0, -110] -> min = -110, max = 56
# * [42, 54, 65, 87, 0]             -> min = 0, max = 87
# * [5]                             -> min = 5, max = 5
# функции sorted, max и min использовать нельзя!



# Решение 1.
print('\n') # Пустая строка для разделения вывода в консоли

# Создадим функции для нахождения Мин и Макс значений, полученных в виде переменной, 
# содержащей список (кортеж) чисел (int и/или float)
# !!! Если в аргумент функции вводить числа напрямую, выдаст ошибку.
# Можно наоборот в качестве аргумента использовать только (*arg), 
# тогда будет работать только с явно перечисленными в аргументе числами,
# но не со ссылкой на список. (переменной)

def get_min(sequence: list|tuple): # Функция принимает переменную, в кот. список цифр
    '''Определяет минимальное значение в списке чисел'''

    min_value = sequence[0] # Начальное значение для сравнения (усл. мин.)
    for i in range(len(sequence)): # Проходим по списку (длине)
        if min_value >= sequence[i]: # Сравниваем текущий мин. с каждым значением
            min_value = sequence[i] # Присваиваем наименьшее из двух
    return min_value # Возвращаем результат


# Функция для Максимума создается ровно так же, как и для Мин. (только знак сравнения др.)

def get_max(sequence: list|tuple): # Функция принимает переменную, в кот. список цифр
    '''Определяет максимальное значение в списке чисел'''

    min_value = sequence[0] # Начальное значение для сравнения (усл. макс.)
    for i in range(len(sequence)): # Проходим по списку (длине)
        if min_value <= sequence[i]: # Сравниваем текущий макс. с каждым значением
            min_value = sequence[i] # Присваиваем набольшее из двух
    return min_value # Возвращаем результат


# Проверка работы функциий (ниже)
# Для примера возьмем списки из условия задачи и пару "своих" 

L1 = [4,6,2,1,9,63,-134,566]         #-> min = -134, max = 566
L2 = [-52, 56, 30, 29, -54, 0, -110] #-> min = -110, max = 56
L3 = [42, 54, 65, 87, 0]             #-> min = 0,    max = 87
L4 = [5]                             #-> min = 5,    max = 5      

L5 = (44, 86, -15, 1, 9.2, -63.5, -134, 566, -200.2) #-> min = -200.2, max = 566
L6 = [-58, 63, -30.2, 115.02, 29, -54, 0, -110]      #-> min = -110,   max = 115.02

sequence_ = L5 # !!! Задаем номер нужного списка из предложенных для проверки

minimum = get_min(sequence_) # Проверяем нахождение Минимального значения
maximum = get_max(sequence_) # Проверяем нахождение Максимального значения

print('min = ', minimum, ', max = ', maximum, sep='') # Выводим значение в коносль

# Конец проверки. (Конец решения 1.)


       
# Решение 2.
print('\n') # Пустая строка для разделения вывода в консоли


# Попробуем создать ф-ю, которая будет работать универсальнее.

def get_minimum(variable: list|tuple, *numbers: int|float):
    '''
    Определяет минимальное значение в списке чисел.
    В качестве аргументов принимает список чисел и/или любые числа.
    '''
    # Проверим 1й аргумент на тип. Если = одно число, - создадим из него список
    if type(variable) == list or type(variable) == tuple:
        sequence = list(variable) + list(numbers) # Объединяем в общий список
    else: 
        num_ = [] # Создаем свой список, т.к. (*numbers) может не быть.
        num_.append(variable)
        sequence = num_ + list(numbers) # Объединяем в общий список
    
    # Далее все как в ф-ях выше (Либо: Вписать сюда 1ю из ф-й выше вместо нижних строк)
    min_value = sequence[0] # Начальное значение для сравнения
    for i in range(len(sequence)): # Проходим по списку (длине)
        if min_value >= sequence[i]: # Сравниваем текущий мин. с каждым значением
            min_value = sequence[i] # Присваиваем наименьшее из двух
    return min_value # Возвращаем результат


# Данная функция принимает в качестве аргументов либо просто набор чисел (int и/или float)
# Либо только переменную, в которой находится список (кортеж) из чисел
# Либо и переменную со списком и дополнительно любой набор (по кол-ву) чисел.
# !!! Переменная должна быть на 1 месте, и только после нее - через ',' набор чисел (вручную) 

# Для поиска Максимального значения (как и выше) все то же самое (только с другим знаком сравнения)
# Поэтому, для экономии места я ее тут повторять не буду. 

# Проверка работы функции для Решения 2 (минимальное значение)

fun_1 = get_minimum(L6) # Списки для проверок определены выше. Можно поменять номер у 'L' [1-6].
fun_2 = get_minimum(5, 25 , -120 , 2.25 , 50.3 , -18.2 , 48) # Только числа
fun_3 = get_minimum(L5, 5, 25 , -120 , 2.25 , 50.3 , -18.2 , 48) # внешний список и + числа
fun_4 = get_minimum(6) # Одно число
#fun_5 = get_minimum() # Выдаст ошибку, т.к. необходим хотя бы 1 аргумент.

fun = fun_3 # Укажем Номер одной из 'fun' выше для вывода в консоль.

print('Минимальное значение =', fun) # Выведем в консоль результат работы функции (минимум из списка)

# Конец проверки для решения 2. (Конец Решения 2.)


print('\n') # Пустая строка для разделения вывода в консоли
