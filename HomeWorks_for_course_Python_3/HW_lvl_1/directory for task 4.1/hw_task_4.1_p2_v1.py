# Домашняя работа по задаче 4.1 курса Python 3 (Продолжение)

# Задача 4.1. (Условие)
# ...........
# Напишите программу, с помощью которой по ID студента можно получать информацию о школе и студенте.

# Формат вывода:

# ID Студента:
# Имя студента:
# ID школы:
# Название школы:

# Students: Student_Id, Student_Name, School_Id
# School:   School_Id,  School_Name,  Place_Count



# Решение 1. (п.2)
# Наиболее оптимальное, по крайней мере на первый взгляд.
# Для одного решения одной конкретной задачи
# Сначала создать нужный запрос в данной БД
# А потом - ф-ю под конкретный результат.
print('\n') # Пустая строка для разделения вывода в консоли
# !На основе уже обновленной БД (из п.1)

import sqlite3


path_ = 'teachers_.db' # БД в одной папке с кодом

connection = sqlite3.connect(path_) # Подключаемся к БД
cursor = connection.cursor() # Создаем "указатель"

cursor.execute('''
SELECT Students.Student_Id, Students.Student_Name, School.School_Id, School.School_Name
FROM Students
JOIN School
ON Students.School_Id = School.School_Id;
''') # Создаем запрос на сводную таблицу согласно задачи

table = cursor.fetchall() # Выводим из нее все данные в переменную
connection.close() # Отключаемся от БД

# print(table, '\n') # Для проверки полученной таблицы


# Создадим ф-ю для обработки полученной таблицы (списка кортежей)
def get_student_detail(student_Id: int):
    '''Получаем данные по ученику и его школе по ID ученика'''
    try:
        id = None # Проверка на наличие значения
        for row in table: # Используем внешнюю переменную (при ее наличии)
            if row[0] == student_Id:
                id = student_Id
                print('ID ученика:', row[0])
                print('Имя ученика:', row[1])
                print('ID школы:', row[2])
                print('Название школы:', row[3], '\n')
        if id == None: print('Такого ID не существует')
    except: print('Ошибка идентификации Таблицы')


# Проверка Решения 1.
# М.б. добавить в качестве второго аргумента имя Таблицы (с данными)
# Но т.к. это - не универсальное решение (для любой таблицы) и в задаче указано только по ID
# То решил оставить как есть, с добавление Проверок (исключений) на всякий случай 
# Тут подход - последовательных действий (операций), 
# следовательно предыдущие результаты будут подхватываться кодом ниже (По-идее.)

get_student_detail(202) # Вывод результата работы ф-и (согласно задачи)


# Конец Решения 1 (п.2) для Задачи 4.1 (по sql)
print('\n') # Пустая строка для разделения вывода в консоли
