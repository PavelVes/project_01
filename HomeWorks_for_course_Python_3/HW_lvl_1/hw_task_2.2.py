# Домашняя работа по задаче 2.2 курса Python 3

# Задача 2.2. (Условие)

# Напишите функцию, которая возвращает номер квартала по номеру месяца
# Например: 
# месяц 2 (февраль) является частью первого квартала; 
# месяц 6 (июнь) является частью второго квартала; 
# месяц 11 (ноябрь) является частью четвертого квартала.


# Решение 1.
print('\n') # Пустая строка для разделения вывода в консоли
print('Решение 1')

def quarter_(month: int): # Решение просто через перечисление, т.к. элементов мало.
    '''Возвращает № квартала [1-4] по № месяца [1-12]'''
    try:
        if 0 < month <= 3: quarter = 1
        elif 3 < month <=6: quarter = 2
        elif 6 < month <=9: quarter = 3
        elif 9 < month <= 12: quarter = 4
        return quarter
    except:
        print('!Такого месяца не существует!')


# Проверка работы функции. 
import random
month = random.randint(-5, 15) # Выберем случайно проверочный месяц (включая не существующие)

quarter_0 = quarter_(month) # Получим номер Квартала
print(f'Месяц {month} является частью {quarter_0} квартала.') # Выведем проверочный результат

# Конец решения 1.



# Решение 2. (без перечислений)
print('\n') # Пустая строка для разделения вывода в консоли
print('Решение 2')

def quarter_of(month: int) -> int: # Решение через формулу
    '''Возвращает № квартала [1-4] по № месяца [1-12]'''
    try:
        if 0 < month < 13: return int((month + 2) / 3)
        else: raise Exception
    except:
        print('Error: Incorrect month number')


# Проверка решения 2.
quarter = quarter_of(month) # Получим номер Квартала (месяц определен выше)
print(f'Месяц № {month} относится к {quarter} кварталу.') # Вывод результата

# Конец решения 2.



# Решение 4.
print('\n') # Пустая строка для разделения вывода в консоли
print('Решение 3')

# Для любого месяца в обе стороны (шутливое :) )
def quarter_by(month: int, *, lim = 500):
    '''Возвращает № квартала соответствующего года по № месяца,    
    (в т.ч. и отрицательного) в пределах указанного лимита'''

    _next = 'после_' # префикс для будущего
    _previous = 'пред_' # префик для прошлого
    _text_n = 'следующего' # название года вперед
    _text_p = 'предыдущего' # название года назад
    _q_list = (1,2,3,4) # Порядок № кварталов

    try:
        if type(month) == int: # Добавим к Исключению все, что не int

            if month < -abs(lim) or month > abs(lim): # Ограничим введенный № месяца
                print('А ты сможешь вообще понять, сколько это времени?!')
                
            else: # Если в указанном пределе, - основное решение (ниже)
                
                year = (abs(month) - 1) // 12 # Определяем год
                m_number = abs(month) % 12 # Остаток месяцев года
                quarter = (m_number + 2) // 3 # Номер квартала года

                if month > 0: # Выводим результат про будущее (настоящее)
                   if year == 0: text = 'текущего'
                   else: text = _next * (year-1) + _text_n
                
                elif month < 0: # Выводим результат про прошлое
                    quarter = _q_list[quarter * -1] # Кварталы в обратном порядке (д.б.)
                    text = _previous * year + _text_p

                else: raise Exception    

                print(f'{month} месяц относится к {quarter} кварталу {text} года') # прямо из ф-и...

                #return year, quarter, m_number # Как вариант для вывода: №(год, квартал, месяц) 
                # !Для получения корректного № месяца <0 для ост. года, = как для Квартала выше.

        else: raise Exception
        
    except: print('Введи нормальное число!') # Для 'lim' отдельный 'except' стоило бы еще 
                                             # добавить (придумал его как аргумент уже совсем в конце)



# Проверка Решения 4.
month_number = random.randint(-800, 800) # Тут свой № месяца определим
quarter_by(month_number)  # Вывод результата (Сразу из ф-и)

# Очевидно, что ф-ю можно доработать до чего-то реально полезного.
# Но, т.к. это - скорее личное развлечение (в рамках учебы), то оставлю как есть :). 

# Конец Решения 4.
print('\n') # Пустая строка для разделения вывода в консоли
